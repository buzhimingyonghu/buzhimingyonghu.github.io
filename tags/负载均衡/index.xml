<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>负载均衡 on Victor的世界</title>
    <link>https://buzhimingyonghu.github.io/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</link>
    <description>Recent content in 负载均衡 on Victor的世界</description>
    <generator>Hugo</generator>
    <language>zh</language>
    <lastBuildDate>Sat, 20 Jul 2024 19:42:02 +0800</lastBuildDate>
    <atom:link href="https://buzhimingyonghu.github.io/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>腾讯犀牛鸟开源-加权轮询算法</title>
      <link>https://buzhimingyonghu.github.io/posts/zh/opensource/%E8%85%BE%E8%AE%AF%E7%8A%80%E7%89%9B%E9%B8%9F%E5%BC%80%E6%BA%90%E5%8A%A0%E6%9D%83%E8%BD%AE%E8%AF%A2%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sat, 20 Jul 2024 19:42:02 +0800</pubDate>
      <guid>https://buzhimingyonghu.github.io/posts/zh/opensource/%E8%85%BE%E8%AE%AF%E7%8A%80%E7%89%9B%E9%B8%9F%E5%BC%80%E6%BA%90%E5%8A%A0%E6%9D%83%E8%BD%AE%E8%AF%A2%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;h1 id=&#34;平滑加权轮询负载均衡插件&#34;&gt;平滑加权轮询负载均衡插件&lt;/h1&gt;&#xA;&lt;h2 id=&#34;一概述&#34;&gt;一、概述&lt;/h2&gt;&#xA;&lt;p&gt;为了避免传统加权轮询中可能出现的负载不均衡，采用平滑加权轮询（Smooth Weighted Round-Robin，简称 SWRR）。它通常用于将请求分配到一组服务器中，以达到更均衡的负载分配。在传统的加权轮询（Weighted Round-Robin）基础上，通过平滑处理来避免负载分配的不均匀性。&lt;/p&gt;&#xA;&lt;h2 id=&#34;二具体实现&#34;&gt;二、具体实现&lt;/h2&gt;&#xA;&lt;p&gt;平滑加权轮询算法的目标是减少传统加权轮询算法中的不均衡现象，尤其是在请求到达不均匀或服务器负载变化的情况下。该算法通过以下方式来平滑负载分配：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;加权池&lt;/strong&gt;：服务器的权重决定了它们在加权池中的出现频率。平滑加权轮询算法会在轮询过程中根据权重动态调整每台服务器的&amp;quot;虚拟&amp;quot;权重，使得负载分配更均匀。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;平滑处理&lt;/strong&gt;：算法会计算每台服务器的负载和权重，并在每次分配请求时，基于服务器的负载情况调整请求的分配。这种方式确保了高负载的服务器不会被过度分配请求，从而避免了负载过度集中。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;动态调整&lt;/strong&gt;：当服务器的负载发生变化时，算法会动态调整权重值，以确保负载在服务器之间的分配更加合理。例如，如果某台服务器变得很繁忙，它的权重值可能会被降低，从而减少它接收请求的频率。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;示例&#34;&gt;示例&lt;/h3&gt;&#xA;&lt;p&gt;假设有三个节点 A、B、C，它们的权重分别为 5、1、1。初始时，各节点的当前权重为 0。&lt;/p&gt;&#xA;&lt;h4 id=&#34;第一次请求&#34;&gt;第一次请求：&lt;/h4&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;A：0 + 5 = 5&#xA;B：0 + 1 = 1&#xA;C：0 + 1 = 1&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;选择 A，因为 A 的当前权重最高。然后 A 的当前权重变为 &lt;code&gt;5 - (5 + 1 + 1) = -2&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;h4 id=&#34;第二次请求&#34;&gt;第二次请求：&lt;/h4&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;A：-2 + 5 = 3&#xA;B：1 + 1 = 2&#xA;C：1 + 1 = 2&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;选择 A，因为 A 的当前权重仍然最高。然后 A 的当前权重变为 &lt;code&gt;3 - (5 + 1 + 1) = -4&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
