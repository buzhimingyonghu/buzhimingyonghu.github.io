<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>优化器 on Victor的世界</title>
    <link>http://localhost:1313/tags/%E4%BC%98%E5%8C%96%E5%99%A8/</link>
    <description>Recent content in 优化器 on Victor的世界</description>
    <generator>Hugo</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 10 Nov 2024 19:42:02 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/%E4%BC%98%E5%8C%96%E5%99%A8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>匹配向量索引</title>
      <link>http://localhost:1313/posts/zh/vectordb/%E5%8C%B9%E9%85%8D%E5%90%91%E9%87%8F%E7%B4%A2%E5%BC%95/</link>
      <pubDate>Sun, 10 Nov 2024 19:42:02 +0800</pubDate>
      <guid>http://localhost:1313/posts/zh/vectordb/%E5%8C%B9%E9%85%8D%E5%90%91%E9%87%8F%E7%B4%A2%E5%BC%95/</guid>
      <description>&lt;h1 id=&#34;匹配向量索引任务介绍概述&#34;&gt;匹配向量索引任务介绍概述&lt;/h1&gt;&#xA;&lt;p&gt;这个任务的目标是根据查询中的条件，判断是否可以将查询转换为向量索引扫描，并在可能的情况下使用该索引。通过这种方式，你可以显著提高向量最近邻查询的效率，避免全表扫描。&lt;/p&gt;&#xA;&lt;p&gt;具体来说，你需要实现一个优化规则，该规则能够识别出需要执行&lt;strong&gt;向量索引扫描&lt;/strong&gt;的SQL查询，并将这些查询转换成使用向量索引的执行计划。任务的关键部分是优化器（optimizer），你需要根据查询的结构和给定的索引类型选择合适的索引进行查询优化。&lt;/p&gt;&#xA;&lt;h3 id=&#34;任务步骤&#34;&gt;任务步骤：&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;识别查询&lt;/strong&gt;：首先，优化器需要识别SQL查询中是否有需要使用向量索引的部分。查询通常会包含计算向量距离（如&lt;code&gt;&amp;lt;-&amp;gt;&lt;/code&gt;）的条件，这时候就可能需要使用索引扫描来替代全表扫描。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;转换为向量索引扫描&lt;/strong&gt;：当确认查询能使用向量索引时，优化器需要将查询计划转换为&lt;strong&gt;向量索引扫描&lt;/strong&gt;。这个过程包括：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;查找查询中的&lt;strong&gt;向量列&lt;/strong&gt;，通常是表中的第一个向量列。&lt;/li&gt;&#xA;&lt;li&gt;选择一个可用的索引（如HNSW或IVFFlat）来优化查询。&lt;/li&gt;&#xA;&lt;li&gt;将查询转换为一个新的查询计划节点，替代传统的全表扫描和排序操作。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;支持的查询类型&lt;/strong&gt;：你需要处理不同形式的查询，特别是带有&lt;code&gt;ORDER BY&lt;/code&gt;和&lt;code&gt;LIMIT&lt;/code&gt;子句的查询。例如，查询可能包含按向量距离排序并限制返回结果数量的操作，这些查询应转换为使用向量索引扫描。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;索引选择策略&lt;/strong&gt;：在优化器中，你需要实现一个策略来选择合适的索引。可以选择以下几种策略：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;空值&lt;/strong&gt;（默认）：选择第一个可用的向量索引。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;HNSW&lt;/strong&gt;：只匹配HNSW索引。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;IVFFlat&lt;/strong&gt;：只匹配IVFFlat索引。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;无索引&lt;/strong&gt;：不使用任何索引，进行精确的最近邻搜索。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;处理的三种情况&#34;&gt;处理的三种情况&lt;/h3&gt;&#xA;&lt;p&gt;优化器需要处理以下三种常见的查询结构，并根据情况选择使用向量索引扫描：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;情况1：TopN直接跟随SeqScan&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TopN { n=2, order_bys=[(&amp;#34;Default&amp;#34;, &amp;#34;l2_dist([1.000000,1.000000,1.000000], #0.0)&amp;#34;)]}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  SeqScan { table=t1 }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这种情况下，查询直接使用了&lt;code&gt;TopN&lt;/code&gt;（即返回前&lt;code&gt;k&lt;/code&gt;个结果），并且顺序扫描表。此时可以直接将&lt;code&gt;SeqScan&lt;/code&gt;替换为向量索引扫描。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;情况2：TopN跟随Projection&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TopN { n=2, order_bys=[(&amp;#34;Default&amp;#34;, &amp;#34;l2_dist([1.000000,1.000000,1.000000], #0.0)&amp;#34;)]}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Projection { exprs=[&amp;#34;#0.0&amp;#34;, &amp;#34;l2_dist([1.000000,1.000000,1.000000], #0.0)&amp;#34;] }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    SeqScan { table=t1 }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这种情况下，&lt;code&gt;TopN&lt;/code&gt;操作之后有一个&lt;code&gt;Projection&lt;/code&gt;操作，需要对结果进行投影。优化器仍然可以将&lt;code&gt;SeqScan&lt;/code&gt;替换为向量索引扫描，并在索引扫描后加上投影操作，以保持查询语义。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;情况3：TopN跟随Projection并且列顺序变换&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TopN { n=2, order_bys=[(&amp;#34;Default&amp;#34;, &amp;#34;l2_dist([1.000000,1.000000,1.000000], #0.1)&amp;#34;)]}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Projection { exprs=[&amp;#34;#0.1&amp;#34;, &amp;#34;#0.0&amp;#34;] }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    SeqScan { table=t1 }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这种情况与情况2类似，但投影中列的顺序发生了变化，优化器需要正确地识别出列的映射，并在向量索引扫描后执行相应的投影。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
