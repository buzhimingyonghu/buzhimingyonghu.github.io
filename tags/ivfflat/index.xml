<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>IVFFlat on Victor的世界</title>
    <link>https://buzhimingyonghu.github.io/tags/ivfflat/</link>
    <description>Recent content in IVFFlat on Victor的世界</description>
    <generator>Hugo</generator>
    <language>zh</language>
    <lastBuildDate>Sat, 30 Nov 2024 19:42:02 +0800</lastBuildDate>
    <atom:link href="https://buzhimingyonghu.github.io/tags/ivfflat/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>IVFFlat索引在Bustub中的实现</title>
      <link>https://buzhimingyonghu.github.io/posts/zh/vectordb/ivfflat%E7%B4%A2%E5%BC%95%E5%9C%A8bustub%E4%B8%AD%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sat, 30 Nov 2024 19:42:02 +0800</pubDate>
      <guid>https://buzhimingyonghu.github.io/posts/zh/vectordb/ivfflat%E7%B4%A2%E5%BC%95%E5%9C%A8bustub%E4%B8%AD%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;h3 id=&#34;ivfflat索引&#34;&gt;IVFFlat索引&lt;/h3&gt;&#xA;&lt;p&gt;IVF（Inverted File Index，倒排文件索引）是一种常用于向量搜索（ANN, Approximate Nearest Neighbor）的索引结构，主要用于高维数据检索，比如图像、文本、音频等向量数据的相似性搜索。&lt;/p&gt;&#xA;&lt;p&gt;本文主要介绍IVFFlat索引在Bustub中的实现，主要从以下三个方面来回答：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;IVFFlat索引的概述&lt;/li&gt;&#xA;&lt;li&gt;IVFFlat索引在向量数据库中的应用&lt;/li&gt;&#xA;&lt;li&gt;IVFFlat索引在Bustub中的实现&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;ivfflat索引的概述&#34;&gt;IVFFlat索引的概述&lt;/h2&gt;&#xA;&lt;p&gt;IVF 通过聚类将向量划分到不同的“桶”（centroids, 聚类中心），查询时只在最相关的桶中搜索，从而减少计算量。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;训练阶段&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用 &lt;strong&gt;K-means&lt;/strong&gt; 聚类将所有数据点分成 ( K ) 个簇（每个簇有一个中心）。&lt;/li&gt;&#xA;&lt;li&gt;每个向量根据与哪个中心最近，归属于该中心对应的桶。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;索引构建&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;记录每个桶中的向量 ID 及其原始向量。&lt;/li&gt;&#xA;&lt;li&gt;形成一个 &lt;strong&gt;倒排表&lt;/strong&gt;，即每个簇对应多个向量。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;查询阶段&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;先找到查询向量最接近的 ( N ) 个簇中心（通常 ( N \ll K )）。&lt;/li&gt;&#xA;&lt;li&gt;只在这些簇对应的桶内进行精确搜索，而不是全量搜索。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;示例&#34;&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;假设有 100 万个 128 维向量：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用 K-means 训练出 &lt;strong&gt;1000 个簇中心&lt;/strong&gt;（K=1000）。&lt;/li&gt;&#xA;&lt;li&gt;每个向量归类到最近的簇，存入倒排表。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;当查询时：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;计算查询向量与 1000 个簇中心的距离，找到最近的 10 个簇。&lt;/li&gt;&#xA;&lt;li&gt;只在这 10 个簇对应的桶里搜索最近邻，而不是在全部 100 万个向量中搜索。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;这样，计算量大大减少，提高了搜索速度。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;ivf-的优点&#34;&gt;&lt;strong&gt;IVF 的优点&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;✅ &lt;strong&gt;高效查询&lt;/strong&gt;：比暴力搜索（Brute-force）快很多，适用于大规模数据。&lt;br&gt;&#xA;✅ &lt;strong&gt;可扩展&lt;/strong&gt;：K 值可调，适应不同数据规模。&lt;br&gt;&#xA;✅ &lt;strong&gt;支持 ANN（近似最近邻搜索）&lt;/strong&gt;：可以搭配其他方法（如 PQ, HNSW）进一步加速。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
